#include <bits/stdc++.h> 
/****************************************************************

    Following is the class structure of the Node class:

        class Node
        {
        public:
	        int data;
	        Node *next;
	        Node(int data)
	        {
		        this->data = data;
		        this->next = NULL;
	        }
        };

*****************************************************************/
vector<Node*> reverse(Node* head,Node* end){
    if(head==end){
        if(end and end->next)
            return {end->next,head};
        return {end,end};
    }
    Node* prv=NULL;
    Node* cur=head;
    Node* nxt;
    while(cur!=end){
        nxt=cur->next;
        cur->next=prv;
        prv=cur;
        cur=nxt;
    }
    return {prv,head};
}
Node *getListAfterReverseOperation(Node *head, int n, int b[]){
	// Write your code here.
//     Node* ans=NULL;
//     Node* end=NULL;
//     if(head==NULL)return head;
//     for(int i=0;i<n;i++){
//         int j=0;
//         Node* temp=head;
// //         cout<<head->data<<" ";
//         if(b[i]==0)continue;
//         while(j<b[i] and head){
//             head=head->next;
//             j++;
//         }
// //         cout<<head->data<<" ";
        
// //         if(j==b[i]){
//             vector<Node*> v=reverse(temp,head);
// //         cout<<v[0]->data<<" "<<v[1]->data<<endl;
//             if(ans==NULL){
//                 ans=v[0];
//                 end=v[1];
//             }
//             else{
// //                 cout<<v[0]->data<<" "<<v[1]->data<<endl;
//                 end->next=v[0];
//                 end=v[1];
//             }
// //         cout<<head->data<<endl;
        
//     }
//     if(ans==NULL and head!=NULL){
//         return head;
//     }
//     if(head){
//         end->next=head;
//     }
//     return ans;
    Node *dummy = new Node(0);
   dummy->next = head;
   
   Node *pre = dummy;
   Node *cur = dummy;
   Node *nex = dummy;
   
   int count = 0;    
   while(cur->next != NULL){
       cur = cur->next;
       count++;
   }
   
   int j = 0;
   while(count>0 && j<n){
       cur = pre->next;
       nex = cur->next;
       int x = (b[j]<=count) ? b[j] : count;
       if(x==0){
           j++;
           continue;
       }
       for(int i=1;i<x;i++){
           cur->next = nex->next;
           nex->next = pre->next;
           pre->next = nex;
           nex = cur->next;
       }
       pre = cur;
       count -= b[j];
       j++;
   }
   return dummy->next;
}
int helper(int i, int j, int m, int n,vector<vector<int>> &v){
    if(i>=m or j>=n){
        return 0;
    }
    if(i==m-1 and j==n-1){
        return 1;
    }
    if(v[i][j]!=-1)return v[i][j];
    return v[i][j]=helper(i+1,j,m,n,v)+helper(i,j+1,m,n,v);
}
int uniquePaths(int m, int n) {
    vector<vector<int>> v(m,vector<int> (n,-1));
    return helper(0,0,m,n,v);
}


//traverse to top and down each time starting from 0,0 
//if i>=m or j>=n return 0
//if i==m-1 and j==n-1 return 1
//call function again twice and add for bottom and right
// memoize for better timecomplexity
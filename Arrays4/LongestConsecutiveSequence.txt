class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        set<int> s;
        int n=nums.size();
        if(n==0)return 0;
    for(int i=0;i<n;i++){
        s.insert(nums[i]);
    }
    int ans=INT_MIN;
    for(int i=0;i<n;i++){
        if(!s.count(nums[i]-1)){
            int t=0;
            int x=nums[i];
            while(s.count(x)){
                x++;
                t++;
            }
            ans=max(ans,t);
        }
    }
    return ans;
    }
};

#include <bits/stdc++.h> 


int lengthOfLongestConsecutiveSequence(vector<int> &arr, int n) {
    // Write your code here.
    int N = arr.size();
    int len = 0, res = INT_MIN;
    if(N == 0)
        return 0;
    unordered_map<int, int> mp;
    for(int i = 0; i < N; i++)
        mp[arr[i]]++;
    for(auto i : arr)
    {
        if(mp.find(i - 1) == mp.end())
        {
            int k = i;
            int len = 1;
            while(mp.find(k + 1) != mp.end())
            {
                k++;
                len++;
            }
            // cout<<k<<"len-- "<<i<<"    ";   
            res = max(res, len);
        }
    }
    return res > 0 ? res : 1;
}